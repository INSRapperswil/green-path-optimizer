from(bucket: "raw_data_export")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "netflow")
  |> filter(fn: (r) => r["flags"] == "0")
  |> filter(fn: (r) => r["_field"] == "aggregate")
  |> group(columns: ["source_ipv6", "destination_ipv6"])
  |> map(fn: (r) => ({ r with path: r.node_01 + "-" + r.node_02 + "-" + r.node_03 + "-" + r.node_04}))
  |> keep(columns: ["_time", "source_ipv6", "destination_ipv6", "path", "_value"])
  |> truncateTimeColumn(unit: 1s)
  |> map(fn: (r) => ({ r with timestamp: r._time }))
  |> aggregateWindow(every: inf, fn: last)
  |> group()
  |> filter(fn: (r) => r["_value"] != 0)
  |> drop(columns: ["_time", "_start", "_stop", "_value"])

{% for host_name, host_details in hosts.items() %}
{% if loop.last %}
  |> map(fn: (r) => ({ r with source_ipv6: if r.source_ipv6 == "{{ host_details.ipv6.ip }}" then "{{ host_name }}" else r.source_ipv6 }))
  |> map(fn: (r) => ({ r with destination_ipv6: if r.destination_ipv6 == "{{ host_details.ipv6.ip }}" then "{{ host_name }}" else r.destination_ipv6 })){% else %}
  |> map(fn: (r) => ({ r with source_ipv6: if r.source_ipv6 == "{{ host_details.ipv6.ip }}" then "{{ host_name }}" else r.source_ipv6 }))
  |> map(fn: (r) => ({ r with destination_ipv6: if r.destination_ipv6 == "{{ host_details.ipv6.ip }}" then "{{ host_name }}" else r.destination_ipv6 }))

{% endif %}{% endfor %}